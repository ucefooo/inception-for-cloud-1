---
- name: Create and configure DigitalOcean droplet
  hosts: localhost
  vars_files:
    - vars.yml
  pre_tasks:
    - name: Check if DO_API_TOKEN is set
      fail:
        msg: "Please set the DO_API_TOKEN environment variable: export DO_API_TOKEN='your_digitalocean_api_token'"
      when: lookup('env', 'DO_API_TOKEN') == ''
  
  tasks:
    - name: Create new DigitalOcean droplet
      community.digitalocean.digital_ocean_droplet:
        state: present
        name: "{{ droplet_name }}"
        size: "{{ droplet_size }}"
        region: "{{ droplet_region }}"
        image: "{{ droplet_image }}"
        unique_name: yes
        ssh_keys: ["{{ ssh_key_name }}"]
        wait_timeout: 500
        api_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
      register: droplet

    - name: Debug droplet info
      debug:
        var: droplet

    - name: Add new droplet to inventory
      add_host:
        name: "{{ droplet.data.droplet.networks.v4 | selectattr('type', 'eq', 'public') | map(attribute='ip_address') | first }}"
        groups: droplets
        ansible_host: "{{ droplet.data.droplet.networks.v4 | selectattr('type', 'eq', 'public') | map(attribute='ip_address') | first }}"
        ansible_user: root
        ansible_ssh_private_key_file: /home/vagrant/.ssh/id_rsa
      when: droplet.data is defined

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ droplet.data.droplet.networks.v4 | selectattr('type', 'eq', 'public') | map(attribute='ip_address') | first }}"
        port: 22
        delay: 10
        timeout: 300
      when: droplet.data is defined

- name: Deploy Docker and application to DigitalOcean droplets
  hosts: droplets
  become: yes
  vars_files:
    - vars.yml
  tasks:
    - name: Create project directory
      file:
        path: "{{ project_dir }}"
        state: directory
        mode: '0755'
      tags: ['deploy']

    - name: Copy docker-compose.yml
      copy:
        src: docker-compose.yml
        dest: "{{ project_dir }}/docker-compose.yml"
        mode: '0644'
      tags: ['deploy']
    
    - name: Copy docker-entrypoint.sh
      copy:
        src: docker-entrypoint.sh
        dest: "{{ project_dir }}/docker-entrypoint.sh"
        mode: '0755'
      tags: ['deploy']

    - name: Copy script.sh
      copy:
        src: script.sh
        dest: "{{ project_dir }}/script.sh"
        mode: '0755'
      tags: ['deploy']

    - name: Execute installation script
      shell: cd {{ project_dir }} && ./script.sh
      args:
        executable: /bin/bash
      tags: ['deploy'] 